{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nclass ResponsiveDirectiveDirective {\n  constructor(element, breakPointObserver) {\n    // we make use of breakPointObserver for make our website responsive \n    // breakpointobserver have one observe method and it's take paramatere as a array and we pass two element in array\n    // here we make use of two brakpoint as handsetportrait and weblansacpe\n    // this.breakPointObserver.observe([Breakpoints.HandsetLandscape, Breakpoints.WebLandscape]).subscribe(\n    //   {\n    //     next: (res) => {\n    //       for (let breakPoint of Object.keys(res.breakpoints)) {\n    //         if (res.breakpoints[breakPoint]) {\n    //           if(breakPoint === Breakpoints.HandsetLandscape) {\n    //             this.elementRef.nativeElement.classList.remove('pc');\n    //           } \n    //           if ( breakPoint === Breakpoints.WebLandscape) {\n    //             this.elementRef.nativeElement.classList.add('pc');\n    //           }\n    //         }\n    //       }\n    //     }\n    //   }\n    // );\n    this.element = element;\n    this.breakPointObserver = breakPointObserver;\n    this.breakPointObserver.observe([Breakpoints.HandsetPortrait, Breakpoints.WebLandscape]).subscribe({\n      next: result => {\n        for (let breakpoint of Object.keys(result.breakpoints)) if (result.breakpoints[breakpoint]) {\n          if (breakpoint === Breakpoints.HandsetPortrait) this.element.nativeElement.classList.remove('pc');\n          if (breakpoint === Breakpoints.WebLandscape) this.element.nativeElement.classList.add('pc');\n        }\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ResponsiveDirectiveDirective_Factory(t) {\n    return new (t || ResponsiveDirectiveDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ResponsiveDirectiveDirective,\n    selectors: [[\"\", \"appResponsiveDirective\", \"\"]]\n  });\n}\nexport { ResponsiveDirectiveDirective };","map":{"version":3,"names":["Breakpoints","ResponsiveDirectiveDirective","constructor","element","breakPointObserver","observe","HandsetPortrait","WebLandscape","subscribe","next","result","breakpoint","Object","keys","breakpoints","nativeElement","classList","remove","add","_","i0","ɵɵdirectiveInject","ElementRef","i1","BreakpointObserver","_2","selectors"],"sources":["D:\\leelaAnular\\my-demo\\myProfile\\src\\app\\directives\\responsive-directive.directive.ts"],"sourcesContent":["import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appResponsiveDirective]'\n})\nexport class ResponsiveDirectiveDirective {\n\n  constructor(\n    private element: ElementRef,\n    private breakPointObserver: BreakpointObserver\n  ) {\n    // we make use of breakPointObserver for make our website responsive \n    // breakpointobserver have one observe method and it's take paramatere as a array and we pass two element in array\n    // here we make use of two brakpoint as handsetportrait and weblansacpe\n    // this.breakPointObserver.observe([Breakpoints.HandsetLandscape, Breakpoints.WebLandscape]).subscribe(\n    //   {\n    //     next: (res) => {\n    //       for (let breakPoint of Object.keys(res.breakpoints)) {\n    //         if (res.breakpoints[breakPoint]) {\n    //           if(breakPoint === Breakpoints.HandsetLandscape) {\n    //             this.elementRef.nativeElement.classList.remove('pc');\n    //           } \n    //           if ( breakPoint === Breakpoints.WebLandscape) {\n    //             this.elementRef.nativeElement.classList.add('pc');\n    //           }\n    //         }\n    //       }\n    //     }\n    //   }\n    // );\n\n    this.breakPointObserver\n    .observe([Breakpoints.HandsetPortrait, Breakpoints.WebLandscape])\n    .subscribe({\n      next: (result: any) => {\n        for (let breakpoint of Object.keys(result.breakpoints))\n          if (result.breakpoints[breakpoint]) {\n            if (breakpoint === Breakpoints.HandsetPortrait)\n              this.element.nativeElement.classList.remove('pc');\n\n            if (breakpoint === Breakpoints.WebLandscape)\n              this.element.nativeElement.classList.add('pc');\n          }\n      },\n    });\n   }\n}\n"],"mappings":"AAAA,SAA6BA,WAAW,QAAQ,qBAAqB;;;AAGrE,MAGaC,4BAA4B;EAEvCC,YACUC,OAAmB,EACnBC,kBAAsC;IAE9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IArBQ,KAAAD,OAAO,GAAPA,OAAO;IACP,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAsB1B,IAAI,CAACA,kBAAkB,CACtBC,OAAO,CAAC,CAACL,WAAW,CAACM,eAAe,EAAEN,WAAW,CAACO,YAAY,CAAC,CAAC,CAChEC,SAAS,CAAC;MACTC,IAAI,EAAGC,MAAW,IAAI;QACpB,KAAK,IAAIC,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,WAAW,CAAC,EACpD,IAAIJ,MAAM,CAACI,WAAW,CAACH,UAAU,CAAC,EAAE;UAClC,IAAIA,UAAU,KAAKX,WAAW,CAACM,eAAe,EAC5C,IAAI,CAACH,OAAO,CAACY,aAAa,CAACC,SAAS,CAACC,MAAM,CAAC,IAAI,CAAC;UAEnD,IAAIN,UAAU,KAAKX,WAAW,CAACO,YAAY,EACzC,IAAI,CAACJ,OAAO,CAACY,aAAa,CAACC,SAAS,CAACE,GAAG,CAAC,IAAI,CAAC;;MAEtD;KACD,CAAC;EACH;EAAC,QAAAC,CAAA,G;qBAxCSlB,4BAA4B,EAAAmB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA,GAAAF,EAAA,CAAAC,iBAAA,CAAAE,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAA5BxB,4BAA4B;IAAAyB,SAAA;EAAA;;SAA5BzB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}